作用域分词法作用域 和动态作用域两种
js 采用的是词法作用域

顾名思义 词法作用域是编译器在词法分析阶段定义的作用域，也就是说写代码的时候写在哪就是哪，已经是确定的

遮蔽效应：本级定义 变量a 上一级也定义变量a，则在本级无法访问上级的a。例外：如果是全局作用域下的属性则可以通过 window.a访问


如何欺骗 词法作用域

1. eval(string)方法
在非严格模式下 将传入字符串伪装成为eval位置书写的代码 改变了eval所在作用域的词法作用域

在严格模式下 eval（）所转化的代码 拥有自己的作用域 所以无法改变eval所在的作用域

2.with 关键字
    创建一个新的词法作用域
    var obj = {
        a: 1,
        b: 2,
        c: 3
    };
    obj.a = 2;
    obj.b = 3;
    obj.c = 4;

    with (obj){
        a = 2
        b = 3
        c = 4
    }

    副作用：如果在with操作的对象中没有的属性 会被泄漏到全局作用域

    with在严格模式下被完全禁止

会造成极大的性能损失，因为在词法分析阶段 无法确定这些代码会给作用域带来怎样的修改，或者创建新的词法作用域接受的对象到底是啥

